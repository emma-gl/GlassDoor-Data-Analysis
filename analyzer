import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
import logging


def read_data(filename):
    data = []
    with open(filename) as file:
        next(file)
        for line in file:
            data.append(line.strip().split(','))
    #print(data)
    return data

def highest_paying_job(year):
    #print(data)
    data = read_data(f"{year} data.csv")
    df = pd.read_csv(f'{year} data.csv')
    top_50job = df['job']
    max = 0
    max_job_info = []
    listed_jobs =[]
    avg_job_data = average_job_data(data)
    count = 0
    for job in data:
        #print(job)
        if job[1] not in listed_jobs:
            listed_jobs.append(job[1])
            if int(job[2]) > max:
                max_job_info = job
                max = int(job[2])
    logging.info(f"The highest paying job in the {year} was: {max_job_info[1]} with a average salary of ${max_job_info[2]}.")
    print(f"The highest paying job in the {year} was: {max_job_info[1]} with a average salary of ${max_job_info[2]}.")
    plt.figure(figsize = (13,10))
    df.groupby(top_50job)['salary'].sum().sort_values(ascending = True).plot(kind = 'barh', color = 'maroon')
    plt.title(f'Top Jobs of {year} Ranked by Salary', fontsize = 15, pad = 12, color = 'r')
    plt.xlabel('Total Salary', fontsize = 12)
    plt.ylabel('Job', fontsize = 12)
    plt.show()

def highest_satisfaction_job(year):
    #print(data)
    data = read_data(f"{year} data.csv")
    df = pd.read_csv(f'{year} data.csv')
    top_50job = df['job']
    max = 0
    max_job_info = []
    listed_jobs =[]
    avg_job_data = average_job_data(data)
    count = 0
    for job in data:
        #print(job)
        if job[1] not in listed_jobs:
            listed_jobs.append(job[1])
            if float(job[3]) > max:
                max_job_info = job
                max = float(job[3])
    logging.info(f"The most satisfactory job in the year {year} was: {max_job_info[1]} with a satisfactory rating of {max_job_info[3]}.")
    print(f"The most satisfactory job in the year {year} was: {max_job_info[1]} with a satisfactory rating of {max_job_info[3]}.")
    plt.figure(figsize = (13,10))
    df.groupby(top_50job)['satisfaction'].sum().sort_values(ascending = True).plot(kind = 'barh', color = 'green')
    plt.title(f'Top Jobs of {year} Ranked by Total Satisfaction', fontsize = 15, pad = 12, color = 'r')
    plt.xlabel('Satisfaction Rating', fontsize = 12)
    plt.ylabel('Job', fontsize = 12)
    plt.show()

def highest_demand_job(year):
    #print(data)
    data = read_data(f"{year} data.csv")
    df = pd.read_csv(f'{year} data.csv')
    top_50job = df['job']
    max = 0
    max_job_info = []
    listed_jobs =[]
    avg_job_data = average_job_data(data)
    count = 0
    for job in data:
        #print(job)
        if job[1] not in listed_jobs:
            listed_jobs.append(job[1])
            if int(job[4]) > max:
                max_job_info = job
                max = int(job[4])
    logging.info(f"The job in highest demand in {year} was: {max_job_info[1]} with a total of {max_job_info[4]} openings.")
    print(f"The job in highest demand in {year} was: {max_job_info[1]} with a total of {max_job_info[4]} openings.")
    plt.figure(figsize = (13,10))
    df.groupby(top_50job)['job_openings'].sum().sort_values(ascending = True).plot(kind = 'barh', color = 'blue')
    plt.title(f'Highest-demand Jobs of {year} Based on Amount of Job Openings', fontsize = 15, pad = 12, color = 'r')
    plt.xlabel('Number of openings', fontsize = 12)
    plt.ylabel('Job', fontsize = 12)
    plt.show()

def average_job_data(data):
    jobs = dict()
    for entry in data:
        if entry[1] not in jobs:
            jobs[entry[1]] = []
        jobs[entry[1]].append(entry)
    avg_jobs = []
    for job in jobs:
        #print(f"{jobs[job][0][1]}: {len(jobs[job])}")
        entries_for_job = len(jobs[job])
        avg_salary,avg_satisfaction,avg_job_openings,avg_rank = 0,0,0,0
        for i in range(entries_for_job):
            avg_salary += float(jobs[job][i][2])
            avg_satisfaction += float(jobs[job][i][3])
            avg_job_openings += float(jobs[job][i][4])
            avg_rank += float(jobs[job][i][5])
        avg_salary = avg_salary/entries_for_job
        avg_satisfaction = avg_satisfaction/entries_for_job
        avg_job_openings = avg_job_openings/entries_for_job
        avg_rank = avg_rank/entries_for_job
        avg_job_stats = [jobs[job][0][1],avg_salary,avg_satisfaction,avg_job_openings,avg_rank]
        avg_jobs.append(avg_job_stats)
    return avg_jobs

def distribution(category,year):
    df = pd.read_csv('data.csv')
    df2 = pd.read_csv(f'{year} data.csv')
    plt.figure(figsize = (8,4))
    sns.distplot(df[f'{category}'], color = 'forestgreen',label = 'Average (2015-2021)',kde=True)
    sns.distplot(df2[f'{category}'], color = 'skyblue',label = '2016',kde=True)
    plt.title(f'Distribution of {category.capitalize()}', fontsize = 15, pad = 12, color = 'r')
    plt.xlabel(f'{category.capitalize()}', fontsize = 12)
    plt.ylabel('Density', fontsize = 12)
    plt.legend() 
    plt.show()

    fig, axs = plt.subplots(2, 2, figsize=(7, 7))

    sns.histplot(data=df2['salary'], x=df2["salary"], kde=True, color="maroon", ax=axs[0, 0])
    sns.histplot(data=df2['satisfaction'], x=df2["satisfaction"], kde=True, color="green", ax=axs[0, 1])
    sns.histplot(data=df2['job_openings'], x=df2["job_openings"], kde=True, color="blue", ax=axs[1, 0])
    sns.histplot(data=df2['rank'], x=df2["rank"], kde=True, color="gold", ax=axs[1, 1])

    plt.show()

def correlation():
    #visualize correlation of each variable using pearson correlation
    df = pd.read_csv('data.csv')
    df.shape
    df.head()
    df.describe()
    df.info()
    df['year'] = pd.to_datetime(df['year'], format = '%Y')
    df.corr()
    sns.heatmap(df.corr(), annot = True, cmap = 'viridis')
    plt.title('Pearson Correlation', fontsize = 15, pad = 12, color = 'b')
    plt.show()
    print('Maximum of salary : ', df['salary'].max())
    print('Minimum of salary : ', df['salary'].min())
    print('Median of salary : ', df['salary'].median())
    print('Average of salary : ', df['salary'].mean())
    print('Total of salary : ', df['salary'].sum())
    print('Maximum of satisfaction : ', df['satisfaction'].max())
    print('Minimum of satisfaction : ', df['satisfaction'].min())
    print('Median of satisfaction : ', df['satisfaction'].median())
    print('Average of satisfaction : ', df['satisfaction'].mean())
    print('Total of satisfaction : ', df['satisfaction'].sum())
    #analyze job salary and job satisfaction based on rank
    job_rank = pd.pivot_table(df, index = ['rank', 'job'], values = ['satisfaction', 'salary'],
                            aggfunc = {'satisfaction' : np.mean, 'salary' : np.sum}).sort_values('rank', ascending = True)
    job_rank.head(50)



def main():

    #now we will Create and configure logger 
    logging.basicConfig(filename='job analytics.log',format='%(asctime)s %(message)s', level=logging.INFO)
    data = read_data('data.csv')
    year = input("What year would you like to analyze? (2015-2021) ")
    highest_paying_job(year)
    highest_satisfaction_job(year)
    highest_demand_job(year)
    category = input("What category would you like to see the distribution of? ")
    distribution(category,year)
    correlation()
    


main()

